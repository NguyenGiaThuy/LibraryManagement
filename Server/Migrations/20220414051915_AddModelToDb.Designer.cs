// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Models;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(LibraryManagementContext))]
    [Migration("20220414051915_AddModelToDb")]
    partial class AddModelToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Server.Models.LibBook", b =>
                {
                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ISBN");

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Genre")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<string>("Receiver")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Isbn")
                        .HasName("PK_Book");

                    b.HasIndex("Receiver");

                    b.HasIndex(new[] { "Id" }, "UQ__Lib_Book__3214EC266CFD1D7E")
                        .IsUnique();

                    b.ToTable("Lib_Book", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibBookManagementCard", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Creator")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ISBN");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Isbn");

                    b.ToTable("Lib_BookModificationCard", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibCallCard", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("ArrearAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Creator")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("CurrentDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ISBN");

                    b.Property<string>("MembershipId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("MembershipID")
                        .IsFixedLength();

                    b.Property<string>("MembershipName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Isbn");

                    b.HasIndex("MembershipId");

                    b.ToTable("Lib_CallCard", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibMember", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("MembershipId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("MembershipID")
                        .IsFixedLength();

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Lib_Member", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibMembership", b =>
                {
                    b.Property<string>("MembershipId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("MembershipID")
                        .IsFixedLength();

                    b.Property<int?>("ArrearAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Creator")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("DaysInArrear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("MembershipId")
                        .HasName("PK_Membership");

                    b.HasIndex("Creator");

                    b.HasIndex(new[] { "Id" }, "UQ__Lib_Memb__3214EC2620FBD211")
                        .IsUnique();

                    b.ToTable("Lib_Membership", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<int?>("Education")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.HasIndex(new[] { "Id" }, "UQ__Lib_User__3214EC2683C2742C")
                        .IsUnique();

                    b.ToTable("Lib_User", (string)null);
                });

            modelBuilder.Entity("Server.Models.LibBook", b =>
                {
                    b.HasOne("Server.Models.LibUser", "ReceiverNavigation")
                        .WithMany("LibBooks")
                        .HasForeignKey("Receiver")
                        .HasConstraintName("FK_B_U");

                    b.Navigation("ReceiverNavigation");
                });

            modelBuilder.Entity("Server.Models.LibBookManagementCard", b =>
                {
                    b.HasOne("Server.Models.LibUser", "CreatorNavigation")
                        .WithMany("LibBookManagementCards")
                        .HasForeignKey("Creator")
                        .HasConstraintName("FK_BMC_U");

                    b.HasOne("Server.Models.LibBook", "IsbnNavigation")
                        .WithMany("LibBookManagementCards")
                        .HasForeignKey("Isbn")
                        .HasConstraintName("FK_BMC_B");

                    b.Navigation("CreatorNavigation");

                    b.Navigation("IsbnNavigation");
                });

            modelBuilder.Entity("Server.Models.LibCallCard", b =>
                {
                    b.HasOne("Server.Models.LibUser", "CreatorNavigation")
                        .WithMany("LibCallCards")
                        .HasForeignKey("Creator")
                        .HasConstraintName("FK_CC_U");

                    b.HasOne("Server.Models.LibBook", "IsbnNavigation")
                        .WithMany("LibCallCards")
                        .HasForeignKey("Isbn")
                        .HasConstraintName("FK_CC_B");

                    b.HasOne("Server.Models.LibMembership", "Membership")
                        .WithMany("LibCallCards")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FK_CC_MS");

                    b.Navigation("CreatorNavigation");

                    b.Navigation("IsbnNavigation");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Server.Models.LibMember", b =>
                {
                    b.HasOne("Server.Models.LibMembership", "Membership")
                        .WithMany("LibMembers")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FK_M_M");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Server.Models.LibMembership", b =>
                {
                    b.HasOne("Server.Models.LibUser", "CreatorNavigation")
                        .WithMany("LibMemberships")
                        .HasForeignKey("Creator")
                        .HasConstraintName("FK_MS_U");

                    b.Navigation("CreatorNavigation");
                });

            modelBuilder.Entity("Server.Models.LibBook", b =>
                {
                    b.Navigation("LibBookManagementCards");

                    b.Navigation("LibCallCards");
                });

            modelBuilder.Entity("Server.Models.LibMembership", b =>
                {
                    b.Navigation("LibCallCards");

                    b.Navigation("LibMembers");
                });

            modelBuilder.Entity("Server.Models.LibUser", b =>
                {
                    b.Navigation("LibBookManagementCards");

                    b.Navigation("LibBooks");

                    b.Navigation("LibCallCards");

                    b.Navigation("LibMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
